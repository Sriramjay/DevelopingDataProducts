boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region="east")
east <- subset(pollution, region=="east")
head(east)
hist(east, col="green")
hist(pm25$east, col="green")
hist(pm25$east, col="green")
?hist
hist(pm25, region = "east", col = "green")
hist(east, col="green")
hist(3, col="green")
hist(east$pm25, col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pm25, region=="west"), col="green")
hist(west$pm25, col="green")
hist(subset(pm25), col="green", region=="west")
hist(3, col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(latitude, pm25)
?with
with(pollution, plot(latitude, pm25))
abline(v=12, lty=2, lwd=4)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="east")
plot(east$latitude, east$pm25, main="East")
q()
library(swirl)
swirl()
?Devices
plot(eruptions, waiting)
faithful
with(faithful, plot(eruptions, waiting))
?title
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, fileset = "geyserplot.png")
dev.copy(png, file set = "geyserplot.png")
?dev.copy
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = "state", layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(aairquality$ozone, na.rm = TRUE)
range(airquality$ozone, na.rm = TRUE)
range(airquality$ozone, na.rm=TRUE)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppb", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main="Wind and Ozone in NYC")
may <- with(subset(airquality, 5))
may <- subset(airquality, 5)
?subset
may <- subset(airquality, Month == 5)
points(Wind, Ozone)
plot(may, pch = 19, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, pch = 12, col = "red")
points(notmay$Wind, notmay$Ozone, pch = 8, col = "red")
legend("topright", pch(17,8), col("blue","red"), ("May","Other Months"))
legend("topright", pch(17,8), col("blue","red"), ("May","Other Months"))
legend("topright", pch(17,8), col("blue","red"), ("May","Other Months"))
legend("topright", c(pch,(17,8)), c(col,("blue","red")), c(legend,("May","Other Months")))
?legend
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(v=median(airquality$Wind))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0)))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",TRUE)
mtext("Ozone and Weather in New York City",outer=TRUE)
q()
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
power <- read.table(file, header=T, sep=";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
df <- power[(power$Date=="2007-02-01") | (power$Date=="2007-02-02"),]
df$Global_active_power <- as.numeric(as.character(df$Global_active_power))
df$Global_reactive_power <- as.numeric(as.character(df$Global_reactive_power))
df$Voltage <- as.numeric(as.character(df$Voltage))
df <- transform(df, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
df$Sub_metering_1 <- as.numeric(as.character(df$Sub_metering_1))
df$Sub_metering_2 <- as.numeric(as.character(df$Sub_metering_2))
df$Sub_metering_3 <- as.numeric(as.character(df$Sub_metering_3))
source('~/plot1.R')
source('~/plot2.R')
source('~/plot3.R')
source('~/plot4.R')
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), airquality, layout = c(5.1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5.1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5.1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathoffile("plot1.R"), local = TRUE
)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,ypch=19,col=rgb(0,.5,.5))
lot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,aaplha=.3))
plot(x,y,pch=19,col=rgb(0,.5,.5,aplha=.3))
plot(x,y,pch=19,col=rgb(0,.5,.5),aplha=.3)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,BuGn)
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=pl(20))
image(volcano,col=p1(20))
q()
library(swirl)
swirl()
str(mpg)
qplot(mpg$displ, mpg$hwy, data=mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg,col=drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom=c("point", "smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom=c("boxplot"))
qplot(drv, hwy, data = mpg, geom="boxplot")
qplot(drv, hwy, data = mpg, geom="boxplot",color=manufacturer)
qplot(frequency=hwy, data = mpg, color = drv)
qplot(frequency, data = mpg, color = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"), facets=.~drv,method="loess")
g <- ggplot(mpg, aes=c(displ,hwy))
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color=pink,4,alpha=1/2)
g+geom_point(color="pink",4,alpha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv),labs(title="Swirl Rules!"),labs(x="DIsplacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(color=drv,labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(size=4,alpha=1/2,aes(color=drv)+labs(title="Swirl Rules!")+labs(x="DIsplacement",y="Hwy Mileage")
)
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="DIsplacement",y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement",
| y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3, method="lm", se=FLASE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", and ylim=c(-3,3),type="l")
plot(myx, myy, type="l", and ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))+geom_line()
g + geom_line()
g + geom_line()+ylim(-3,3)
g + geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ, y=hwy,color=factor(year)))
g + geom_point()
g + geom_point()+facet_grid(drv ~ cyl, margins=TRUE)
g + geom_point()+facet_grid(drv ~ cyl, margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g + geom_point()+facet_grid(drv ~ cyl, margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="DIsplacement",y="Highway Mileage",title="Swirl Rules!")
g + geom_point()+facet_grid(drv ~ cyl, margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data("airquality")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?text
?points
?lines
?axis
?llines
?llines
?axis
?llines
?lines
?points
?text
?points
?lines
?llines
?axis
?axis
?splom
library(datasets)
data("airquality")
airquality = transform(airquality, Month = factor(months()))
qplot(Wind,Ozone,data=airquality,geom'"smooth')
qplot(Wind,Ozone,data=airquality,geom="smooth')
)
qplot(Wind,Ozone,data=airquality)
library(ggplot2)
qplot(Wind,Ozone,data=airquality)
qplot(Wind,Ozone,data=airquality,geom="smooth')
airquality = transform(airquality, Month = factor(months())
)
qplot(Wind,Ozone,data=airquality,facets = .~factor(month))
qplot(Wind,Ozone,data=airquality,facets =.~factor(month()))
?transform
airquality = transform(airquality, Month = factor(months())
)
qplot(Wind,Ozone,data=airquality,facets=.~month())
library(ggplot2)
g <- ggplot(movies, aes(votes,rating))
print(g)
library(swirl)
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,bandwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
str(brk)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,colors=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,shape=cut,geom=c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm",facets=.~cut)
g <- ggplot(data=diamonds,aes(depth,price))
summary(g)
g <- ggplot(data=diamonds,aes(depth,price)) + geom_point(alpha=1/3)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints
names(diamonds)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data=diamonds,aaes(depth,price))
g <- ggplot(data=diamonds,aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
q()
library(swirl)
swirl()
swirl()
swirl()
q()
source('~/plot1.R')
source('~/plot1.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot4.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot3.R')
source('~/plot4.R')
source('~/plot5.R')
source('~/plot6.R')
library(lattice)
actdata <- read.csv("activity.csv")
actdata$date <- as.Date(actdata$date,"%Y-%m-%d")
head(actdata)
totsteps <- tapply(actdata$steps, actdata$date,sum)
hist(totsteps,col="blue",xlab="Total Steps per Day",
ylab="Frequency", main="Histogram of Total Steps taken per day")
mean(totsteps,na.rm=TRUE)
median(totsteps,na.rm=TRUE)
meansteps <- tapply(actdata$steps,actdata$interval,
mean,na.rm=TRUE)
plot(row.names(meansteps),meansteps,type="l",
xlab="Time Intervals (5-minute)",
ylab="Mean number of steps taken (all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
interval_num <- which.max(meansteps)
interval_max_steps <- names(interval_num)
interval_max_steps
num_na_values <- sum(is.na(actdata))
num_na_values
na_indices <-  which(is.na(actdata))
imputed_values <- meansteps[as.character(actdata[na_indices,3])]
names(imputed_values) <- na_indices
for (i in na_indices) {
actdata$steps[i] = imputed_values[as.character(i)]
}
sum(is.na(actdata))
totsteps <- tapply(actdata$steps, actdata$date,sum)
hist(totsteps,col="red",xlab="Total Steps per Day",
ylab="Frequency", main="Histogram of Total Steps taken per day")
days <- weekdays(actdata$date)
actdata$day_type <- ifelse(days == "Saturday" | days == "Sunday",
"Weekend", "Weekday")
meansteps <- aggregate(actdata$steps,
by=list(actdata$interval,
actdata$day_type),mean)
names(meansteps) <- c("interval","day_type","steps")
xyplot(steps~interval | day_type, meansteps,type="l",
layout=c(1,2),xlab="Interval",ylab = "Number of steps")
tapply(meansteps$steps,meansteps$day_type,
function (x) { c(MINIMUM=min(x),MEAN=mean(x),
MEDIAN=median(x),MAXIMUM=max(x))})
source('~/FICO Processes/Education/Data Science/A1_plot2.R')
source('~/exdata-data-NEI_data/plot1.R')
source('~/exdata-data-NEI_data/plot2.R')
source('~/exdata-data-NEI_data/plot3.R')
source('~/exdata-data-NEI_data/plot3.R')
source('~/exdata-data-NEI_data/plot4.R')
qnorm(.95, 1100, 75)
qnorm(.75, 1100, 75)
pbinom(4,size = 5)
pbinom(4,size = 5, prob = .03)
ppois(5, lambda = 5 * .06)
pbinom(4,size = 5, prob = .06)
pbinom(4,size = 5, prob = .12)
pbinom(4,size = 5, prob = .19)
ppois(5, lambda = 5 * .06)
ppois(5, lambda = 5 * .03)
ppois(5, lambda = 5 * .12)
ppois(5, lambda = 5 * .19)
ppois(5, lambda = 3 * .08)
ppois(5, lambda = 3 * .06)
ppois(5, lambda = 3 * .12)
ppois(5, lambda = 3 * .03)
ppois(5, lambda = 3 * .06)
ppois(5, lambda = 3 * .12)
ppois(5, lambda = 3 * .03)
q()
swirl()
library(swirl)
swirl()
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <_ lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
exit
menu
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- intercept(fit$coef)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varchild <- var(OlsonNames())
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(fit$residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- (dependent ~ independent)
l_nor <- lm(gch_nor ~ gpa_nor)
q()
library(caret)
package(caret)
install.packages('caret')
install.packages('randomForest')
install.packages('rpart.plot')
install.packages('rattle')
install.packages("shiny")
install.packages("devtools")
install.packages("shinyApps")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mysticsource', token='FE57C76050DE04ECA273B51F0A356EE8', secret='dYJbmjdczcvC8dS0SyBZ0l1Mjv5JC/iYqZMNBYGK')
devtools::install_github('rstudio/shinyapps')
library("RCurl", lib.loc="~/R/win-library/3.2")
detach("package:RCurl", unload=TRUE)
library("RCurl", lib.loc="~/R/win-library/3.2")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
install.packages("shinyApps")
install.packages("shinyAce")
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
runApp()
getwd()
setwd("C:/Users/SriramJayasundar/DevelopingDataProducts")
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
